project(
  'avara',
  ['c', 'cpp'],
  version : '0.7.6',
  meson_version : '>= 1.3.0',
  default_options : ['c_std=c17', 'warning_level=3', 'cpp_std=c++17'],
)
cxx = meson.get_compiler('cpp')

m_dep = cxx.find_library('m', required: false)
thread_dep = dependency('threads')
gl_dep = dependency('gl')
sdl2_dep = dependency('sdl2')
sqlite3_dep = dependency('sqlite3')
gtest_dep = dependency('gtest')

avara_deps = [
  m_dep,
  thread_dep,
  gl_dep,
  sdl2_dep,
  sqlite3_dep
]

test_deps = avara_deps
test_deps += gtest_dep

inc_dir = include_directories(
  'src/compat',
  'src/net',
  'src/util',
  'src/util/huffman',
  'src/tui',
  'src/render',
  'src/game',
  'src/bsp',
  'src/audio',
  'src/gui',
  'src/level',
  'src/assets',
  'src/base',
  'vendor',
  'vendor/glad',
  'vendor/glad/KHR',
  'vendor/glm',
  'vendor/nanogui',
  'vendor/nanovg',
  'vendor/pugixml',
  'vendor/utf8',
)

srcs = [
  'src/compat/Memory.cpp',
  'src/compat/System.cpp',
  'src/net/CCommManager.cpp',
  'src/net/CUDPComm.cpp',
  'src/net/AvaraTCP.cpp',
  'src/net/CUDPConnection.cpp',
  'src/net/CProtoControl.cpp',
  'src/util/CRC.cpp',
  'src/util/Beeper.cpp',
  'src/util/huffman/CHuffProcessor.cpp',
  'src/util/huffman/CAbstractPipe.cpp',
  'src/util/huffman/CAbstractHuffPipe.cpp',
  'src/util/huffman/CHandlePipe.cpp',
  'src/util/FastMat.cpp',
  'src/util/ARGBColor.cpp',
  'src/util/Debug.cpp',
  'src/util/CStringDictionary.cpp',
  'src/util/PascalStrings.cpp',
  'src/util/RamFiles.cpp',
  'src/tui/CommandManager.cpp',
  'src/tui/TextCommand.cpp',
  'src/render/ModernOpenGLRenderer.cpp',
  'src/render/LegacyOpenGLRenderer.cpp',
  'src/render/OpenGLShader.cpp',
  'src/render/OpenGLVertices.cpp',
  'src/render/AbstractRenderer.cpp',
  'src/game/CLogic.cpp',
  'src/game/CFreeSolid.cpp',
  'src/game/CIncarnator.cpp',
  'src/game/CForceField.cpp',
  'src/game/CTeamColorAdjuster.cpp',
  'src/game/CPlacedActors.cpp',
  'src/game/CHUD.cpp',
  'src/game/CWeapon.cpp',
  'src/game/KeyFuncs.cpp',
  'src/game/CDome.cpp',
  'src/game/CAbstractMissile.cpp',
  'src/game/CScout.cpp',
  'src/game/CSwitchActor.cpp',
  'src/game/CAbstractActor.cpp',
  'src/game/CGoal.cpp',
  'src/game/CParasite.cpp',
  'src/game/CDoorActor.cpp',
  'src/game/CLogicTimer.cpp',
  'src/game/CLogicCounter.cpp',
  'src/game/CGuardActor.cpp',
  'src/game/CRUDsqlite.cpp',
  'src/game/CMineActor.cpp',
  'src/game/CFreeCam.cpp',
  'src/game/CLogicBase.cpp',
  'src/game/CPlayerMissile.cpp',
  'src/game/CWorldShader.cpp',
  'src/game/CGoody.cpp',
  'src/game/CAvaraApp.cpp',
  'src/game/CWallActor.cpp',
  'src/game/CTriPyramidActor.cpp',
  'src/game/CAbstractPlayer.cpp',
  'src/game/CSphereActor.cpp',
  'src/game/CHologramActor.cpp',
  'src/game/CBall.cpp',
  'src/game/CUfo.cpp',
  'src/game/CSmart.cpp',
  'src/game/CMarkerActor.cpp',
  'src/game/CAbstractYon.cpp',
  'src/game/CGlowActors.cpp',
  'src/game/PlayerRatingsSimpleElo.cpp',
  'src/game/CWallDoor.cpp',
  'src/game/CRandomIncarnator.cpp',
  'src/game/CYonSphere.cpp',
  'src/game/CAvaraGame.cpp',
  'src/game/CTextActor.cpp',
  'src/game/CLogicAnd.cpp',
  'src/game/CYonBox.cpp',
  'src/game/CLogicDistributor.cpp',
  'src/game/CLogicDelay.cpp',
  'src/game/CAbstractMovers.cpp',
  'src/game/CRealMovers.cpp',
  'src/game/CGrenade.cpp',
  'src/game/CAreaActor.cpp',
  'src/game/CWalkerActor.cpp',
  'src/game/CZombieActor.cpp',
  'src/game/CShuriken.cpp',
  'src/game/CSkyColorAdjuster.cpp',
  'src/game/CNetManager.cpp',
  'src/game/CDepot.cpp',
  'src/game/CPlayerActor.cpp',
  'src/game/CTeleporter.cpp',
  'src/game/CMissile.cpp',
  'src/game/CScoreKeeper.cpp',
  'src/game/CWallSolid.cpp',
  'src/game/CPlayerManager.cpp',
  'src/game/LevelInfo.cpp',
  'src/game/CSliverPart.cpp',
  'src/game/CPill.cpp',
  'src/game/CSoundActor.cpp',
  'src/game/CSolidActor.cpp',
  'src/game/CRamp.cpp',
  'src/game/CGroundColorAdjuster.cpp',
  'src/game/CRealShooters.cpp',
  'src/game/CDoor2Actor.cpp',
  'src/bsp/CCompoundShape.cpp',
  'src/bsp/CBSPWorld.cpp',
  'src/bsp/CSmartBox.cpp',
  'src/bsp/CViewParameters.cpp',
  'src/bsp/CScaledBSP.cpp',
  'src/bsp/CBSPPart.cpp',
  'src/bsp/CSmartPart.cpp',
  'src/audio/OggFile.cpp',
  'src/audio/CRateSound.cpp',
  'src/audio/CSoundHub.cpp',
  'src/audio/DopplerPlug.cpp',
  'src/audio/CBasicSound.cpp',
  'src/audio/CSoundMixer.cpp',
  'src/gui/CServerWindow.cpp',
  'src/gui/CNetworkWindow.cpp',
  'src/gui/ColorManager.cpp',
  'src/gui/CWindow.cpp',
  'src/gui/CPlayerWindow.cpp',
  'src/gui/Tags.cpp',
  'src/gui/CTrackerWindow.cpp',
  'src/gui/CRosterWindow.cpp',
  'src/gui/CLevelWindow.cpp',
  'src/gui/CApplication.cpp',
  'src/level/LevelLoader.cpp',
  'src/level/LinkLoose.cpp',
  'src/level/Parser.cpp',
  'src/assets/BasePath.cpp',
  'src/assets/BaseAssetStorage.cpp',
  'src/assets/AssetManager.cpp',
  'src/assets/PackageManifest.cpp',
  'src/assets/LocalAssetRepository.cpp',
  'src/base/CBaseObject.cpp',
  'src/base/CTagBase.cpp',
  'src/base/CDirectObject.cpp',
  'vendor/csscolorparser.cpp',
  'vendor/nanogui/widget.cpp',
  'vendor/nanogui/colorcombobox.cpp',
  'vendor/nanogui/common.cpp',
  'vendor/nanogui/checkbox.cpp',
  'vendor/nanogui/vscrollpanel.cpp',
  'vendor/nanogui/button.cpp',
  'vendor/nanogui/text.cpp',
  'vendor/nanogui/stackedwidget.cpp',
  'vendor/nanogui/tabheader.cpp',
  'vendor/nanogui/window.cpp',
  'vendor/nanogui/screen.cpp',
  'vendor/nanogui/popup.cpp',
  'vendor/nanogui/layout.cpp',
  'vendor/nanogui/nanogui_resources.cpp',
  'vendor/nanogui/glcanvas.cpp',
  'vendor/nanogui/tabwidget.cpp',
  'vendor/nanogui/progressbar.cpp',
  'vendor/nanogui/combobox.cpp',
  'vendor/nanogui/theme.cpp',
  'vendor/nanogui/label.cpp',
  'vendor/nanogui/messagedialog.cpp',
  'vendor/nanogui/glutil.cpp',
  'vendor/nanogui/textbox.cpp',
  'vendor/nanogui/slider.cpp',
  'vendor/nanogui/popupbutton.cpp',
  'vendor/nanogui/desccombobox.cpp',
  'vendor/pugixml/pugixml.cpp',
  'vendor/glm/detail/glm.cpp',
  'vendor/stb_vorbis.c',
  'vendor/glad/glad.c',
  'vendor/nanovg/nanovg.c'
]

avara_srcs = srcs 
avara_srcs += 'src/Avara.cpp'

bindir = meson.current_build_dir()
exe = executable(
  'Avara',
  avara_srcs,
  install : true,
  install_dir : bindir,
  dependencies : avara_deps,
  include_directories : inc_dir,
  cpp_args: '-DNANOGUI_GLAD'
)

test_srcs = srcs
test_srcs += 'src/tests.cpp'

tests = executable(
  'tests',
  test_srcs,
  install : true,
  install_dir : bindir,
  dependencies : test_deps,
  include_directories : inc_dir,
  cpp_args: '-DNANOGUI_GLAD'
)

test('avara tests', tests, args: ['--basepath', (meson.current_source_dir() / '')])